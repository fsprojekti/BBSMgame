{"version":3,"sources":["assets/balance.png","assets/stake.png","assets/login.svg","context/context.js","components/auth/AuthOptions.js","components/layout/Navbar.js","links.js","components/misc/CreateOrderModal.js","components/layout/Sidebar.js","components/misc/Modal.js","components/misc/ServiceBar.js","components/misc/ServiceLoading.js","components/misc/Stats.js","components/pages/Home.js","components/auth/Login.js","components/misc/BarChart.js","components/misc/ToggleSwitch.js","components/misc/Trades.js","components/misc/TradeModal.js","components/misc/CancelOrderModal.js","components/pages/Trade.js","components/misc/PieChart.js","components/misc/MiningBar.js","components/misc/TransactionsTable.js","components/misc/AllTransactionsTable.js","components/misc/BlockchainData.js","components/misc/ConfirmModal.js","components/pages/Blockchain.js","components/misc/RankingTable.js","components/pages/Ranking.js","components/pages/Error.js","App.js","index.js"],"names":["module","exports","AppContext","React","createContext","AppProvider","children","useState","isGameOn","setIsGameOn","isConfirmModalOpen","setIsConfirmModalOpen","isStakeModalOpen","setIsStakeModalOpen","isTradeModalOpen","setIsTradeModalOpen","isCancelOrderModalOpen","setIsCancelOrderModalOpen","isCreateOrderModalOpen","setIsCreateOrderModalOpen","isAlertOpen","setIsAlertOpen","modalContent","setModalContent","confirmModalContent","setConfirmModalContent","tradeModalContent","setTradeModalContent","cancelOrderModalContent","setCancelOrderModalContent","token","undefined","player","otherPrices","pendingTrades","requestedTrades","allPendingTransactions","totalStake","gameData","setGameData","Provider","value","clearGameData","openConfirmModal","closeConfirmModal","openStakeModal","closeStakeModal","openTradeModal","closeTradeModal","openCancelOrderModal","closeCancelOrderModal","openCreateOrderModal","closeCreateOrderModal","openAlert","closeAlert","useGlobalContext","useContext","AuthOptions","history","useHistory","className","onClick","localStorage","setItem","window","location","reload","push","Navbar","useEffect","timer","setTimeout","clearTimeout","href","links","id","url","text","icon","CreateOrderModal","price","setPrice","showAlert","setShowAlert","alertContent","setAlertContent","confirm","a","isNaN","Math","floor","toString","split","length","parseInt","amountOfAvailableService","getItem","playerId","data","amountOfService","options","headers","Authorization","Axios","post","document","getElementById","response","message","changePriceInput","e","target","err","console","log","handleKeypress","key","htmlFor","type","name","placeholder","onChange","onKeyPress","Sidebar","orderExists","setOrderExists","relativeStake","setRelativeStake","tableDataArray","setTableDataArray","orderNotExists","order","orders","filter","item","provider","_id","Array","isArray","newRelativeStake","stake","toFixed","players","sort","b","upgradeNumber","balance","slice","playersArray","renderTableData","map","link","to","style","color","fontSize","amountOfOtherService1","typeOfOtherService1","amountOfOtherService2","typeOfOtherService2","index","background","playerName","Modal","ServiceBar","serviceCompleted","setServiceCompleted","timeLeft","setTimeLeft","millisToMinutesAndSeconds","millis","d","Date","round","getUTCMinutes","getUTCSeconds","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","services","service","newServiceCompleted","now","serviceTimestamp","timeForService","width","ServiceLoading","consumer","typeOfService","relativeTime","calculateTimeLeft","data-tip","data-for","place","effect","Stats","serviceDataArray","setServiceDataArray","Promise","all","consumerObject","providerObject","serviceArray","renderServiceData","src","balanceImg","alt","stakeImg","nextTimeForService","Home","checkLoggedInAndGame","Login","setPlayerName","password","setPassword","submit","preventDefault","loginPlayer","loginRes","go","loginImg","BarChart","dataArray","modifiedData","checked","millisToMinutesAndSecondsShort","realData","setTradeModal","onMouseEnter","event","cursor","mouseHover","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","theme","fontFamily","axis","legend","fontWeight","colors","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","axisLeft","legendPosition","legendOffset","tickValues","tooltip","renderTooltip","label","renderLabel","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","SwitchToggle","nextChecked","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","Trade","dataArray1","setDataArray1","dataArray2","setDataArray2","dataArray3","setDataArray3","modifiedDataArray1","setModifiedDataArray1","modifiedDataArray2","setModifiedDataArray2","modifiedDataArray3","setModifiedDataArray3","checked1","setChecked1","checked2","setChecked2","checked3","setChecked3","millisToFloat","array1","array2","array3","forEach","modifiedArray1","modifiedArray2","modifiedArray3","sortDataArrays","ToggleSwitch","TradeModal","txFee","setTxFee","orderId","changeFeeInput","transactions","transactionsArray","CancelOrderModal","delete","addEventListener","removeEventListener","Trades","CenteredMetric","dataWithArc","centerX","centerY","total","x","y","textAnchor","dominantBaseline","PieChart","innerRadius","padAngle","cornerRadius","scheme","borderWidth","enableRadialLabels","sliceLabelsSkipAngle","sliceLabelsTextColor","sortByValue","layers","MiningBar","setWidth","miningTime","getTime","createdMillis","TransactionsTable","AllTransactionsTable","sortBy","setSortBy","orderOfSort","setOrderOfSort","isChecked","checkBoxes","setCheckBoxes","displayTime","time","toLocaleTimeString","sortDataArray","arrayA","createdAt","timeA","arrayB","timeB","textA","toUpperCase","textB","selectOne","itemName","newArray","filterDataArray","checkedBoxes","selectedTypes","includes","allTransactions","timeString","filteredTransactionsArray","BlockchainData","chartDataArray","setChartDataArray","newStake","setNewStake","countDecimals","confirmStake","confirmUnstake","unstake","changeStakeInput","createDataArray","backgroundColor","ConfirmModal","transactionId","Blockchain","RankingTable","fromServiceBalance","fromStakeBalance","Ranking","Error","defaults","baseURL","App","socket","setSocket","socketConnected","useCallback","sessionID","emit","initialData","startGame","prevState","newData","endGame","createOrder","deleteOrder","obj","updateBalance","amount","elementsIndex","findIndex","el","deleteTransaction","intended","createTransaction","some","createService","deleteService","updateAvailableService","updateOtherService1","updateOtherService2","updateStake","reduce","updateTime","initialTime","initialTimeForService","updateServiceTime","updateProduction","newTimeForService","newNextTimeForService","service1","service2","addAllTransaction","updateUpgrade","newSocket","io","query","auth","close","connectSocket","on","off","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5ac090f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/balance.6040daaf.png\";","module.exports = __webpack_public_path__ + \"static/media/stake.70483a2e.png\";","module.exports = __webpack_public_path__ + \"static/media/login.9a76e74e.svg\";","import React, { useState, useContext } from 'react'\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({children}) => {\n    const [isGameOn, setIsGameOn] = useState(false);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n    const [isStakeModalOpen, setIsStakeModalOpen] = useState(false);\n    const [isTradeModalOpen, setIsTradeModalOpen] = useState(false);\n    const [isCancelOrderModalOpen, setIsCancelOrderModalOpen] = useState(false);\n    const [isCreateOrderModalOpen, setIsCreateOrderModalOpen] = useState(false);\n    const [isAlertOpen, setIsAlertOpen] = useState(false);\n\n    const [modalContent, setModalContent] = useState('');\n    const [confirmModalContent, setConfirmModalContent] = useState('');\n    const [tradeModalContent, setTradeModalContent] = useState('');\n    const [cancelOrderModalContent, setCancelOrderModalContent] = useState('');\n\n    const [gameData, setGameData] = useState({\n        token: undefined,\n        player: undefined,\n        otherPrices: undefined,\n        pendingTrades: undefined,\n        requestedTrades: undefined,\n        allPendingTransactions: undefined,\n        totalStake: undefined\n    });\n\n    const clearGameData = () => {\n        setGameData({\n            token: undefined,\n            player: undefined,\n            otherPrices: undefined,\n            pendingTrades: undefined,\n            requestedTrades: undefined,\n            allPendingTransactions: undefined,\n            totalStake: undefined\n        });\n    };\n\n    const openConfirmModal = () => {\n        setIsConfirmModalOpen(true);\n    };\n    const closeConfirmModal = () => {\n        setIsConfirmModalOpen(false);\n    };\n\n    const openStakeModal = () => {\n        setIsStakeModalOpen(true);\n    };\n    const closeStakeModal = () => {\n        setIsStakeModalOpen(false);\n    };\n\n    const openTradeModal = () => {\n        setIsTradeModalOpen(true);\n    };\n    const closeTradeModal = () => {\n        setIsTradeModalOpen(false);\n    };\n\n    const openCancelOrderModal = () => {\n        setIsCancelOrderModalOpen(true);\n    };\n    const closeCancelOrderModal = () => {\n        setIsCancelOrderModalOpen(false);\n    };\n\n    const openCreateOrderModal = () => {\n        setIsCreateOrderModalOpen(true);\n    };\n    const closeCreateOrderModal = () => {\n        setIsCreateOrderModalOpen(false);\n    };\n\n    const openAlert = () => {\n        setIsAlertOpen(true);\n    };\n    const closeAlert = () => {\n        setIsAlertOpen(false);\n    };\n\n\n    return (\n        <AppContext.Provider value={{\n            isGameOn,\n            setIsGameOn,\n            gameData,\n            setGameData,\n            clearGameData,\n            modalContent,\n            setModalContent,\n            openConfirmModal,\n            closeConfirmModal,\n            confirmModalContent,\n            setConfirmModalContent,\n            isConfirmModalOpen,\n            openStakeModal,\n            closeStakeModal,\n            isStakeModalOpen,\n            openTradeModal,\n            closeTradeModal,\n            tradeModalContent,\n            setTradeModalContent,\n            isTradeModalOpen,\n            openCancelOrderModal,\n            closeCancelOrderModal,\n            cancelOrderModalContent,\n            setCancelOrderModalContent,\n            isCancelOrderModalOpen,\n            openCreateOrderModal,\n            closeCreateOrderModal,\n            isCreateOrderModalOpen,\n            isAlertOpen,\n            openAlert,\n            closeAlert\n        }}>\n            {children}\n        </AppContext.Provider>\n    )\n};\n\n\n\nexport const useGlobalContext = () => {\n    return useContext(AppContext)\n};\n\nexport {AppContext, AppProvider}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {useGlobalContext} from \"../../context/context\";\n\nexport default function AuthOptions () {\n    const {gameData, clearGameData} = useGlobalContext();\n    const history = useHistory();\n\n    const login = () => history.push(\"/login\");\n    const logout = () => {\n        clearGameData();\n        localStorage.setItem(\"auth-token\", \"\");\n        localStorage.setItem(\"playerId\", \"\");\n        window.location.reload(false);\n    };\n\n    return (\n        <nav>\n            {\n                gameData.player ? (\n                    <button className=\"nav-btn\" onClick={logout}>Log out</button>\n                ) : (\n                    <>\n                        <button className=\"nav-btn\" onClick={login}>Log in</button>\n                    </>\n                )\n            }\n        </nav>\n    )\n};\n","import React, { useEffect }  from 'react';\nimport { useGlobalContext} from \"../../context/context\";\n\nimport AuthOptions from '../auth/AuthOptions'\n\nconst Navbar = () => {\n    const { isAlertOpen, closeAlert } = useGlobalContext();\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            closeAlert();\n        }, 10000);\n        return () => clearTimeout(timer);\n    }, [isAlertOpen]);\n\n    return (\n        <nav>\n            <div className={\"nav-center\"}>\n                <div className='nav-header'>\n                    <div>\n                        <h2 className={\"nav-heading\"}>\n                            <a href={'/'}>SharedManufacturing</a>\n                        </h2>\n                    </div>\n                    <div>\n                        {\n                            isAlertOpen ? (\n                                <div className=\"event-alert\">\n                                    <p>Your order was canceled!</p>\n                                </div>\n                            ) : (\n                                <></>\n                            )\n                        }\n                    </div>\n                    <div className='nav-links-container'>\n                        <ul>\n                            <AuthOptions/>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n};\n\nexport default Navbar\n","import React from 'react';\nimport {\n    FaHome,\n    FaUserFriends,\n    FaChartPie,\n    FaChartBar\n} from 'react-icons/fa';\nexport const links = [\n    {\n        id: 1,\n        url: '/',\n        text: 'Home',\n        icon: <FaHome />,\n    },\n    {\n        id: 2,\n        url: '/trade',\n        text: 'Trade',\n        icon: <FaUserFriends />,\n    },\n    {\n        id: 3,\n        url: '/blockchain',\n        text: 'Blockchain',\n        icon: <FaChartPie />,\n    },\n    {\n        id: 4,\n        url: '/ranking',\n        text: 'Ranking',\n        icon: <FaChartBar />,\n    }\n];\n","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst CreateOrderModal = () => {\n    const { gameData, isCreateOrderModalOpen, closeCreateOrderModal } = useGlobalContext();\n    const [price, setPrice] = useState(\"0\");\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirm = async () => {\n        try {\n            if (price === undefined || price === \"\") {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if (isNaN(price) || price < 0) {\n                    setAlertContent('Input must be a non-negative number');\n                    setShowAlert(true);\n                } else {\n                    if (countDecimals(price) > 0) {\n                        setAlertContent('Input value must be an integer');\n                        setShowAlert(true);\n                    } else {\n                        if (parseInt(price) > 30000) {\n                            setAlertContent('Maximum price in this game is 30000');\n                            setShowAlert(true);\n                        } else {\n                            if (gameData.player.amountOfAvailableService === 0) {\n                                setAlertContent('Amount of available services is too low');\n                                setShowAlert(true);\n                            } else {\n                                const token = localStorage.getItem(\"auth-token\");\n                                const playerId = localStorage.getItem(\"playerId\");\n                                const data = {\n                                    amountOfService: 1,\n                                    price: price\n                                };\n                                const options = {\n                                    headers: {\n                                        Authorization: \"Bearer \" + token\n                                    }\n                                };\n                                const createRes =  await Axios.post(`/player/createOrder/${playerId}`, data, options);\n                                closeCreateOrderModal();\n                                setAlertContent('');\n                                setShowAlert(false);\n                                setPrice(\"0\");\n                                document.getElementById(\"priceInput\").value= \"\";\n                            }\n                        }\n                    }\n                }\n            }\n        } catch(err) {\n            if (err.response !== undefined && err.response.data.message === \"Trade already exists\") {\n                setAlertContent('Trade with this person already exists');\n                setShowAlert(true);\n            }\n        }\n    };\n\n    const changePriceInput = async (e) => {\n        try {\n            if (e.target.value === \"\") {\n                setPrice(\"0\");\n            } else {\n                setPrice(e.target.value)\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const handleKeypress = async e => {\n        try {\n            if (e.key === 'Enter') {\n                confirm();\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div\n            className={\n                `${isCreateOrderModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'}`\n            }\n        >\n            <div className='modal-confirm-container'>\n                <h3>Set Price</h3>\n                <div className={\"modal-input-group\"}>\n                    <label htmlFor={\"price\"}>Price</label>\n                    <div className=\"modal-input-group-container\">\n                        <input type={\"text\"} name={\"price\"} id={\"priceInput\"} placeholder={\"Enter price\"} onChange={e => changePriceInput(e)} onKeyPress={e => handleKeypress(e)}/>\n                    </div>\n                </div>\n                <div className={`${showAlert? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`}>\n                    {alertContent}\n                </div>\n                <button className='close-modal-btn' onClick={() => {\n                    closeCreateOrderModal();\n                    setAlertContent('');\n                    setShowAlert(false);\n                    setPrice();\n                    document.getElementById(\"priceInput\").value= \"\";\n                }}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default CreateOrderModal;","import React, {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport { links } from '../../links';\nimport { FaMoneyBillAlt, FaBusinessTime, FaChartPie } from 'react-icons/fa';\nimport { useGlobalContext} from \"../../context/context\";\nimport CreateOrderModal from '../misc/CreateOrderModal';\n\nconst Sidebar = () => {\n    const { gameData, openCreateOrderModal } = useGlobalContext();\n    const [orderExists, setOrderExists] = useState(false);\n    const [relativeStake, setRelativeStake] = useState(0);\n    const [tableDataArray, setTableDataArray] = useState([]);\n\n    const orderNotExists = async () => {\n        const order = gameData.orders.filter(item => item.provider === gameData.player._id);\n        setOrderExists(!Array.isArray(order) || !order.length);\n    };\n\n    useEffect(() => {\n        orderNotExists();\n        let newRelativeStake = ((gameData.player.stake / gameData.totalStake) * 100).toFixed(1);\n        setRelativeStake(newRelativeStake);\n        const renderTableData = async () => {\n            const players = await gameData.players.sort((a, b) => parseInt(b.upgradeNumber) === parseInt(a.upgradeNumber) ? (parseInt(b.balance) + parseInt(b.stake)) - (parseInt(a.balance) + parseInt(a.stake)) : parseInt(b.upgradeNumber) - parseInt(a.upgradeNumber));\n            const playersArray = await players.slice(0, 5);\n            setTableDataArray(playersArray);\n        };\n        renderTableData();\n    }, [gameData]);\n\n    return (\n        <div>\n            <div className=\"sidebar\">\n                <ul className='sidebar-links'>\n                    {links.map((link) => {\n                        const { id, url, text, icon } = link;\n                        return (\n                            <li key={id}>\n                                <Link to={url}>\n                                    {icon}\n                                    {text}\n                                </Link>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"stats-sidebar\">\n                <h3>Stats</h3>\n                <div className=\"stats-sidebar-values\">\n                    <div className=\"stats-sidebar-values-stat\">\n                        <FaMoneyBillAlt style={{color: \"green\", fontSize: \"22px\"}}/>\n                        <h4>{gameData.player.balance}</h4>\n                    </div>\n                    <div className=\"stats-sidebar-values-stat\">\n                        <FaBusinessTime style={{color: \"#38aaff\", fontSize: \"22px\"}}/>\n                        <h4 style={gameData.player.amountOfAvailableService === 1 ? {color: \"forestgreen\", fontSize: \"18px\"} : {color: \"darkred\", fontSize: \"18px\"}}>{gameData.player.amountOfAvailableService === 1 ? 'AVAILABLE' : 'UNAVAILABLE'}</h4>\n                    </div>\n                    <div className=\"stats-sidebar-values-stat\">\n                        <FaChartPie style={{color: \"#ffba72\", fontSize: \"22px\"}}/>\n                        <h4>{gameData.player.stake} ({relativeStake}%)</h4>\n                    </div>\n                    <hr />\n                    <div className=\"stats-sidebar-values-stat\">\n                        <h4>Number of upgrades: {gameData.player.upgradeNumber}</h4>\n                    </div>\n                    <div className=\"stats-sidebar-other-services\">\n                        <div className={`${(gameData.player.amountOfOtherService1 > 0) ? 'stats-sidebar-container-green' : 'stats-sidebar-container-red'}`}>\n                            <h4>{gameData.player.typeOfOtherService1}</h4>\n                        </div>\n                        <div className={`${(gameData.player.amountOfOtherService1 > 0) ? 'stats-sidebar-container-green' : 'stats-sidebar-container-red'}`}>\n                            <h4>{gameData.player.amountOfOtherService1}</h4>\n                        </div>\n                    </div>\n                    <div className=\"stats-sidebar-other-services\">\n                        <div className={`${(gameData.player.amountOfOtherService2 > 0) ? 'stats-sidebar-container-green' : 'stats-sidebar-container-red'}`}>\n                            <h4>{gameData.player.typeOfOtherService2}</h4>\n                        </div>\n                        <div className={`${(gameData.player.amountOfOtherService2 > 0) ? 'stats-sidebar-container-green' : 'stats-sidebar-container-red'}`}>\n                            <h4>{gameData.player.amountOfOtherService2}</h4>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"create-order-container\">\n                {gameData.player.amountOfAvailableService === 1 && orderExists ? <button className=\"create-order-btn\" onClick={openCreateOrderModal}>Set Price</button> : ''}\n            </div>\n            <div className=\"ranking-sidebar\">\n                <h3>Top 5 players</h3>\n                <table className=\"table-all-rankings\">\n                    <thead>\n                    <tr>\n                        <th>Rank</th>\n                        <th>Player</th>\n                        <th>Number of upgrades</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        tableDataArray.map((item, index) => (\n                            <tr\n                                key={item._id}\n                                style={{background: `${item.playerName === gameData.player.playerName ? '#fffd6c' : ''}`}}\n                            >\n                                <td><strong>{index + 1}</strong></td>\n                                <td>{item.playerName}</td>\n                                <td>{item.upgradeNumber}</td>\n                            </tr>\n                        ))\n                    }\n                    </tbody>\n                </table>\n            </div>\n            <CreateOrderModal/>\n        </div>\n    )\n};\n\nexport default Sidebar","import React from 'react'\nimport { useGlobalContext} from \"../../context/context\";\n\nconst Modal = () => {\n    const { modalContent } = useGlobalContext();\n    return (\n        <div className={'modal-overlay'}>\n            <div className=\"modal-container\">\n                <h2>{modalContent}</h2>\n            </div>\n        </div>\n    )\n};\n\nexport default Modal","import React, {useState, useEffect, useRef} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\n\nconst ServiceBar = () => {\n    const { gameData } = useGlobalContext();\n    const [serviceCompleted, setServiceCompleted] = useState(0);\n    const [timeLeft, setTimeLeft] = useState(0);\n\n    function useInterval(callback, delay) {\n        const savedCallback = useRef();\n\n        useEffect(() => {\n            savedCallback.current = callback;\n        }, [callback]);\n\n        useEffect(() => {\n            function tick() {\n                savedCallback.current();\n            }\n            if (delay !== null) {\n                let id = setInterval(tick, delay);\n                return () => clearInterval(id);\n            }\n        }, [delay]);\n    }\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    useInterval(async () => {\n        if (gameData.player.amountOfAvailableService === 0) {\n            const service = await gameData.services.filter(service => service.provider === gameData.player._id);\n            let newServiceCompleted = Math.floor(((Date.now() - service[0].serviceTimestamp) / service[0].timeForService) * 100);\n            setServiceCompleted(newServiceCompleted);\n            let timeLeft = service[0].timeForService - (Date.now() - service[0].serviceTimestamp);\n            setTimeLeft(millisToMinutesAndSeconds(timeLeft));\n        } else {\n            setServiceCompleted(100);\n        }\n    }, 50);\n\n\n    return (\n        <>\n            <div className=\"time-container\">\n                <div className=\"bar-container\">\n                    <div className=\"bar-filler\" style={{width: `${serviceCompleted}%`}}>\n                        <span className=\"bar-label\">{`${serviceCompleted}%`}</span>\n                    </div>\n                    <div className=\"bottom\">\n                        {\n                            gameData.player.amountOfAvailableService === 1 ? (\n                                <p>Time for service = {millisToMinutesAndSeconds(gameData.player.timeForService)}</p>\n                            ) : (\n                                <p>Time left = {timeLeft}</p>\n                            )\n                        }\n                        <i></i>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default ServiceBar","import React, {useState, useEffect, useRef} from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport { useGlobalContext} from \"../../context/context\";\n\nconst ServiceLoading = (data) => {\n    const { id, consumer, provider, typeOfService, serviceTimestamp, timeForService } = data.item;\n\n    const { gameData } = useGlobalContext();\n    const [serviceCompleted, setServiceCompleted] = useState(0);\n    const [timeLeft, setTimeLeft] = useState(0);\n\n\n    function useInterval(callback, delay) {\n        const savedCallback = useRef();\n\n        useEffect(() => {\n            savedCallback.current = callback;\n        }, [callback]);\n\n        useEffect(() => {\n            function tick() {\n                savedCallback.current();\n            }\n            if (delay !== null) {\n                let id = setInterval(tick, delay);\n                return () => clearInterval(id);\n            }\n        }, [delay]);\n    }\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    useInterval(async () => {\n        let newServiceCompleted = Math.floor(((Date.now() - gameData.player.serviceTimestamp) / gameData.player.timeForService) * 100);\n        setServiceCompleted(newServiceCompleted);\n\n        const calculateTimeLeft = async () => {\n            let timeLeft = timeForService - (Date.now() - serviceTimestamp);\n            let relativeTime = await Math.floor(((Date.now() - serviceTimestamp) / timeForService) * 100);\n            if (relativeTime < 0 || timeLeft < 0) {\n                relativeTime = 0;\n                timeLeft = 0;\n            }\n            setTimeLeft(millisToMinutesAndSeconds(timeLeft));\n            setServiceCompleted(relativeTime);\n        };\n        calculateTimeLeft();\n    }, 50);\n\n\n    return (\n        <>\n            <div className=\"service-container\" data-tip data-for={id}>\n                <p>{typeOfService}</p>\n                <div id=\"divSpinner\" className=\"spinner-loading\">\n                    <div className=\"loading-text\">{serviceCompleted}%</div>\n                </div>\n                {/*<span className=\"service-tooltip\">\n                    <ul>\n                        <li>Consumer: {consumer}</li>\n                        <li>Provider: {provider}</li>\n                        <li>Time left: {timeLeft}</li>\n                    </ul>\n                </span>*/}\n                <ReactTooltip  id={id} place=\"right\" type=\"dark\" effect=\"solid\">\n                    <ul>\n                        <li>Consumer: {consumer}</li>\n                        <li>Provider: {provider}</li>\n                        <li>Time left: {timeLeft}</li>\n                    </ul>\n                </ReactTooltip>\n            </div>\n        </>\n    )\n};\n\nexport default ServiceLoading","import React, {useState, useEffect} from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport balanceImg from '../../assets/balance.png';\nimport stakeImg from '../../assets/stake.png';\nimport ServiceBar from './ServiceBar';\nimport ServiceLoading from './ServiceLoading';\n\nconst Stats = () => {\n    const { gameData } = useGlobalContext();\n    const [relativeStake, setRelativeStake] = useState(0);\n    const [serviceDataArray, setServiceDataArray] = useState([]);\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    useEffect(() => {\n        let newRelativeStake = ((gameData.player.stake / gameData.totalStake) * 100).toFixed(1);\n        setRelativeStake(newRelativeStake);\n        const renderServiceData = async () => {\n            const services = await gameData.services.filter(service => service.consumer === gameData.player._id);\n            const serviceArray = await Promise.all(services.map(async (item) => {\n                let { consumer, provider, typeOfService, serviceTimestamp, timeForService } = item;\n                const consumerObject = await gameData.players.filter(player => player._id === consumer);\n                const providerObject = await gameData.players.filter(player => player._id === provider);\n                return (\n                    {\n                        id: item._id,\n                        consumer: consumerObject[0].playerName,\n                        provider: providerObject[0].playerName,\n                        typeOfService: typeOfService,\n                        serviceTimestamp: serviceTimestamp,\n                        timeForService: timeForService\n                    }\n                )\n            }));\n            setServiceDataArray(serviceArray);\n        };\n        renderServiceData();\n    }, [gameData]);\n\n    return (\n        <>\n            <div className=\"stats-grid\">\n                <div className=\"grid-item-stats\">\n                    <div className={\"stats-image\"}>\n                        <img src={balanceImg} alt={\"balance\"}/>\n                    </div>\n                    <div className={\"stats-value\"}>\n                        <p>{gameData.player.balance}</p>\n                    </div>\n                </div>\n                <div className=\"grid-item-stats\">\n                    <div className=\"time-value\">\n                        <h2>{gameData.player.typeOfService}</h2>\n                    </div>\n                    <div className={`${gameData.player.amountOfAvailableService === 1 ? 'time-value-available' : 'time-value-unavailable'}`}>\n                        <h2>{gameData.player.amountOfAvailableService === 1 ? 'Available' : 'Unavailable'}</h2>\n                    </div>\n                    <ServiceBar/>\n                </div>\n                <div className=\"grid-item-stats\">\n                    <div className=\"stake-image\">\n                        <img src={stakeImg} alt={\"stake\"}/>\n                    </div>\n                    <div className={\"stake-value\"}>\n                        <p>{gameData.player.stake}</p>\n                    </div>\n                    <div className={\"stake-value\"}>\n                        <p>({relativeStake}%)</p>\n                    </div>\n                </div>\n                <div className=\"grid-item-stats\">\n                    <div className=\"upgrade-value\">\n                        <h3>Number of upgrades: {gameData.player.upgradeNumber}</h3>\n                    </div>\n                    <div className=\"upgrade-container\">\n                        <div className={`${(gameData.player.amountOfOtherService1 > 0) ? 'upgrade-container-green' : 'upgrade-container-red'}`}>\n                            <p>{`${gameData.player.amountOfOtherService1}`} &#215; {`${gameData.player.typeOfOtherService1}`}</p>\n                        </div>\n                        <div>\n                            <p>+</p>\n                        </div>\n                        <div className={`${(gameData.player.amountOfOtherService2 > 0) ? 'upgrade-container-green' : 'upgrade-container-red'}`}>\n                            <p>{`${gameData.player.amountOfOtherService2}`} &#215; {`${gameData.player.typeOfOtherService2}`}</p>\n                        </div>\n                    </div>\n                    <div className=\"upgrade-container\">\n                        <div className=\"upgrade-container-formula\">\n                            <p>{`${gameData.player.typeOfOtherService1}`} + {`${gameData.player.typeOfOtherService2}`} = &#8681; {millisToMinutesAndSeconds(gameData.player.timeForService - gameData.player.nextTimeForService)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"services-container\">\n                <h3>Purchased Services</h3>\n                <div className=\"loading-services-container\">\n                    {\n                        serviceDataArray.map((item) => (\n                            <ServiceLoading item={item} key={item.id}/>\n                        ))\n                    }\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default Stats","import React, { useEffect } from 'react';\nimport {useGlobalContext} from \"../../context/context\";\n\nimport Sidebar from '../layout/Sidebar';\nimport Modal from '../misc/Modal';\nimport Stats from '../misc/Stats';\n\n\nconst Home = () => {\n    const { gameData, isGameOn, setModalContent} = useGlobalContext();\n\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if ((token === null || token === \"\") && (playerId === null || playerId === \"\")) {\n                setModalContent('Please log in!');\n            } else {\n                if (!isGameOn) {\n                    setModalContent('Wait for the admin to start the game!');\n                }\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                {\n                    gameData.player ? (\n                        <div>\n                            {\n                                isGameOn ? (\n                                    <div>\n                                        <div className=\"home-grid\">\n                                            <div className=\"item-sidebar\">\n                                                <Sidebar/>\n                                            </div>\n                                            <div className=\"item-content\">\n                                                <Stats/>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <>\n                                        <Modal/>\n                                    </>\n                                )\n                            }\n                        </div>\n\n                    ) : (\n                        <>\n                            <Modal/>\n                        </>\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Home","import React, { useState } from 'react';\nimport Axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport loginImg from '../../assets/login.svg';\n\nexport default function Login () {\n    const [playerName, setPlayerName] = useState();\n    const [password, setPassword] = useState();\n\n    const [showAlert, setShowAlert] = useState(false);\n\n    const history = useHistory();\n\n    const submit = async (e) => {\n        try {\n            e.preventDefault();\n            const loginPlayer = { playerName, password };\n            const loginRes =  await Axios.post(\"/player/login\", loginPlayer);\n            localStorage.setItem(\"auth-token\", loginRes.data.token);\n            localStorage.setItem(\"playerId\", loginRes.data.id);\n            history.push(\"/\");\n            history.go(0);\n        } catch(err) {\n            if (err.response !== undefined && err.response.data.message === \"Auth failed\") {\n                setShowAlert(true);\n            }\n        }\n    };\n\n    const handleKeypress = async e => {\n        try {\n            if (e.key === 'Enter') {\n                submit(e);\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div className=\"login-App\">\n            <div className=\"login\">\n                <div className=\"login-container\">\n                    <div className={\"login-base-container\"}>\n                        <h3>Login</h3>\n                        <div className={\"login-content\"}>\n                            <div className={\"login-image\"}>\n                                <img src={loginImg} alt={\"login\"}/>\n                            </div>\n                            <div className={\"login-form\"}>\n                                <div className={\"login-form-group\"}>\n                                    <label htmlFor={\"playerName\"}>Player name</label>\n                                    <input type={\"text\"} name={\"playerName\"} placeholder={\"Enter name\"} onChange={e => setPlayerName(e.target.value)} onKeyPress={e => handleKeypress(e)}/>\n                                </div>\n                                <div className={\"login-form-group\"}>\n                                    <label htmlFor={\"password\"}>Password</label>\n                                    <input type={\"password\"} name={\"password\"} placeholder={\"Enter password\"} onChange={e => setPassword(e.target.value)} onKeyPress={e => handleKeypress(e)}/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={`${showAlert? 'login-alert show-alert' : 'login-alert'}`}>\n                            The name or password is incorrect!\n                        </div>\n                        <div className=\"login-footer\">\n                            <button type=\"button\" className=\"login-btn\" onClick={submit}>\n                                Log in\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n","import React from 'react'\nimport { ResponsiveBar } from '@nivo/bar';\nimport { useGlobalContext} from \"../../context/context\";\n\nconst BarChart = ({dataArray, modifiedData, checked}) => {\n    const { gameData, openTradeModal, setTradeModalContent, openCancelOrderModal, setCancelOrderModalContent } = useGlobalContext();\n\n    const setTradeModal = (data) => {\n        if (data.typeOfService !== gameData.player.typeOfService) {\n            const realData = dataArray.filter(item => item._id === data._id);\n            if (!(!Array.isArray(realData) || !realData.length)) {\n                setTradeModalContent(realData[0]);\n                openTradeModal();\n            }\n        } else {\n            if (data.playerName === gameData.player.playerName) {\n                const realData = dataArray.filter(item => item._id === data._id);\n                if (!(!Array.isArray(realData) || !realData.length)) {\n                    setCancelOrderModalContent(realData[0]);\n                    openCancelOrderModal();\n                }\n            }\n        }\n    };\n\n    const mouseHover = (data, event) => {\n        if (data.typeOfService !== gameData.player.typeOfService) {\n            event.target.style.cursor = 'pointer';\n        } else {\n            if (data.playerName === gameData.player.playerName) {\n                event.target.style.cursor = 'pointer';\n            }\n        }\n    };\n\n    const renderLabel = (data) => {\n        const realData = dataArray.filter(item => item._id === data._id);\n        if (!(!Array.isArray(realData) || !realData.length)) {\n            if (!checked) {\n                return realData[0].price.toString();\n            } else {\n                return millisToMinutesAndSecondsShort(realData[0].timeForService);\n            }\n        }\n    };\n\n    const renderTooltip = (data) => {\n        const realData = dataArray.filter(item => item._id === data._id);\n        if (!(!Array.isArray(realData) || !realData.length)) {\n            return realData[0].price.toString();\n        }\n    };\n\n    const millisToMinutesAndSecondsShort = (millis) => {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + ':' + d.getUTCSeconds());\n        }\n    };\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    const toggleData = () => {\n        if (!checked) {\n            return [ 'price' ];\n        } else {\n            return [ 'height' ]\n        }\n    };\n\n    const toggleNameAxis = () => {\n        if (!checked) {\n            return ('PRICE');\n        } else {\n            return ('TIME FOR SERVICE');\n        }\n    };\n\n\n    return (\n        <ResponsiveBar\n            data={modifiedData}\n            onClick={(data) => setTradeModal(data.data)}\n            onMouseEnter={(data, event) => mouseHover(data.data, event)}\n            keys={toggleData}\n            indexBy=\"playerName\"\n            margin={{ top: 10, right: 20, bottom: 50, left: 70 }}\n            padding={0.25}\n            valueScale={{ type: 'symlog'}}\n            theme={{ \"fontSize\": 14, fontFamily: \"Roboto, sans-serif\", axis: { legend: { text: { fontSize: \"16px\", fontWeight: \"bold\", fontFamily: \"Roboto, sans-serif\" } } } }}\n            colors={d => d.data.color}\n            borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n            }}\n            axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: toggleNameAxis(),\n                legendPosition: 'middle',\n                legendOffset: -50,\n                tickValues: 3\n            }}\n            tooltip={({ data, id }) => {\n                return (\n                    <strong>\n                        <p>Price - {data.playerName}: {renderTooltip(data)}</p>\n                        <p>Time for service: {millisToMinutesAndSeconds(data.timeForService)}</p>\n                    </strong>\n\n                )\n            }}\n            label={(data) => renderLabel(data.data)}\n            labelSkipWidth={12}\n            labelSkipHeight={12}\n            labelTextColor=\"white\"\n            animate={false}\n            motionStiffness={90}\n            motionDamping={15}\n        />\n    )\n};\n\n\nexport default BarChart","import React from 'react';\nimport Switch from \"react-switch\";\n\n\nconst SwitchToggle = (data) => {\n\n    const handleChange = nextChecked => {\n        data.onChange(nextChecked);\n    };\n\n\n    return (\n        <div className=\"toggle-switch\">\n            <div className=\"toggle-switch-text\">Price</div>\n            <Switch\n                onChange={handleChange}\n                checked={data.checked}\n                onColor=\"#86d3ff\"\n                onHandleColor=\"#2693e6\"\n                handleDiameter={30}\n                uncheckedIcon={false}\n                checkedIcon={false}\n                boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n                activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                height={20}\n                width={48}\n                className=\"react-switch\"\n            />\n            <div className=\"toggle-switch-text\">Time</div>\n        </div>\n    )\n};\n\n\nexport default SwitchToggle","import React, {useState, useEffect} from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport BarChart from '../misc/BarChart';\nimport ToggleSwitch from '../misc/ToggleSwitch';\n\n\nconst Trade = () => {\n    const { gameData } = useGlobalContext();\n    const [dataArray1, setDataArray1] = useState([]);\n    const [dataArray2, setDataArray2] = useState([]);\n    const [dataArray3, setDataArray3] = useState([]);\n    const [modifiedDataArray1, setModifiedDataArray1] = useState([]);\n    const [modifiedDataArray2, setModifiedDataArray2] = useState([]);\n    const [modifiedDataArray3, setModifiedDataArray3] = useState([]);\n\n    const [checked1, setChecked1] = useState(false);\n    const [checked2, setChecked2] = useState(false);\n    const [checked3, setChecked3] = useState(false);\n\n    const handleChange1 = nextChecked => {\n        setChecked1(nextChecked);\n    };\n\n    const handleChange2 = nextChecked => {\n        setChecked2(nextChecked);\n    };\n\n    const handleChange3 = nextChecked => {\n        setChecked3(nextChecked);\n    };\n\n    const millisToFloat = (millis) => {\n        const time = millis/60000;\n        return time.toFixed(2);\n    };\n\n\n    useEffect(() => {\n        const sortDataArrays = async () => {\n            let array1 = await gameData.orders.filter(item => item.typeOfService === gameData.player.typeOfOtherService1);\n            let array2 = await gameData.orders.filter(item => item.typeOfService === gameData.player.typeOfOtherService2);\n            let array3 = await gameData.orders.filter(item => item.typeOfService === gameData.player.typeOfService);\n            if (checked1) {\n                await array1.forEach((item) => {\n                    item.price = parseInt(item.price);\n                    item.color = '#1E90FF';\n                });\n                await array1.sort((a, b) => a.timeForService - b.timeForService);\n                await array1.forEach((item) => {\n                    item.height = millisToFloat(item.timeForService);\n                });\n                setDataArray1(array1);\n\n            } else {\n                await array1.forEach((item) => {\n                    item.price = parseInt(item.price);\n                    item.color = '#1E90FF';\n                });\n                await array1.sort((a, b) => a.price - b.price);\n                setDataArray1(array1);\n            }\n            if (checked2) {\n                await array2.forEach((item) => {\n                    item.price = parseInt(item.price);\n                    item.color = 'green';\n                });\n                await array2.sort((a, b) => a.timeForService - b.timeForService);\n                await array2.forEach((item) => {\n                    item.height = millisToFloat(item.timeForService);\n                });\n                setDataArray2(array2);\n\n            } else {\n                await array2.forEach((item) => {\n                    item.price = parseInt(item.price);\n                    item.color = 'green';\n                });\n                await array2.sort((a, b) => a.price - b.price);\n                setDataArray2(array2);\n            }\n\n            if (checked3) {\n                await array3.forEach((item) => {\n                    item.price = parseInt(item.price);\n                    if (item.playerName === gameData.player.playerName) {\n                        item.color = '#FFD700';\n                    } else {\n                        item.color = \"#FF8C00\";\n                    }\n                });\n                await array3.sort((a, b) => a.timeForService - b.timeForService);\n                await array3.forEach((item) => {\n                    item.height = millisToFloat(item.timeForService);\n                });\n                setDataArray3(array3);\n            } else {\n                await array3.forEach((item) => {\n                    item.price = parseInt(item.price);\n                    if (item.playerName === gameData.player.playerName) {\n                        item.color = '#FFD700';\n                    } else {\n                        item.color = \"#FF8C00\";\n                    }\n                });\n                await array3.sort((a, b) => a.price - b.price);\n                setDataArray3(array3);\n            }\n            let modifiedArray1 = await array1.map((item) => {\n               if (item.price < 1) {\n                   return {...item, price: 0.9};\n               } else {\n                   return {...item};\n               }\n            });\n            let modifiedArray2 = await array2.map((item) => {\n                if (item.price < 1) {\n                    return {...item, price: 0.9};\n                } else {\n                    return {...item};\n                }\n            });\n            let modifiedArray3 = await array3.map((item) => {\n                if (item.price < 1) {\n                    return {...item, price: 0.9};\n                } else {\n                    return {...item};\n                }\n            });\n            setModifiedDataArray1(modifiedArray1);\n            setModifiedDataArray2(modifiedArray2);\n            setModifiedDataArray3(modifiedArray3);\n        };\n        sortDataArrays();\n    }, [gameData, checked1, checked2, checked3]);\n\n    return (\n        <>\n            <div className=\"trades-container\">\n                <div className=\"other-services-trade-container\">\n                    <div className=\"chart-container\">\n                        <div className=\"chart-container-text\">\n                            <h3>{`${gameData.player.typeOfOtherService1}`}</h3>\n                        </div>\n                        <ToggleSwitch checked={checked1} onChange={handleChange1}/>\n                        <div className=\"chart-container-chart\">\n                            <BarChart dataArray={dataArray1} modifiedData={modifiedDataArray1} checked={checked1}/>\n                        </div>\n                    </div>\n                    <div className=\"chart-container\">\n                        <div className=\"chart-container-text\">\n                            <h3>{`${gameData.player.typeOfOtherService2}`}</h3>\n                        </div>\n                        <ToggleSwitch checked={checked2} onChange={handleChange2}/>\n                        <div className=\"chart-container-chart\">\n                            <BarChart dataArray={dataArray2} modifiedData={modifiedDataArray2} checked={checked2}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"my-service-trade-container\">\n                    <div className=\"chart-container\">\n                        <div className=\"chart-container-text\">\n                            <h3>{`${gameData.player.typeOfService}`}</h3>\n                        </div>\n                        <ToggleSwitch checked={checked3} onChange={handleChange3}/>\n                        <div className=\"chart-container-chart\">\n                            <BarChart dataArray={dataArray3} modifiedData={modifiedDataArray3} checked={checked3}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default Trade;","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst TradeModal = () => {\n    const { gameData, isTradeModalOpen, closeTradeModal, tradeModalContent } = useGlobalContext();\n    const [txFee, setTxFee] = useState(\"0\");\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n    const [tableDataArray, setTableDataArray] = useState([]);\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirm = async () => {\n        try {\n            if (txFee === undefined || txFee === \"\") {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if (isNaN(txFee) || txFee < 0) {\n                    setAlertContent('Input cannot be a negative number');\n                    setShowAlert(true);\n                } else {\n                    if (countDecimals(txFee) > 0) {\n                        setAlertContent('Input value must be an integer');\n                        setShowAlert(true);\n                    } else {\n                        if (parseInt(tradeModalContent.price) + parseInt(txFee) > gameData.player.balance) {\n                            setAlertContent('Price and TxFee is higher than balance');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                orderId: tradeModalContent._id,\n                                txFee: txFee\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const createRes =  await Axios.post(`/player/createTransaction/${playerId}`, data, options);\n                            closeTradeModal();\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n        } catch(err) {\n            if (err.response !== undefined && err.response.data.message === \"Trade already exists\") {\n                setAlertContent('Trade with this person already exists');\n                setShowAlert(true);\n            }\n        }\n    };\n\n    const changeFeeInput = async (e) => {\n        try {\n            if (e.target.value === \"\") {\n                setTxFee(\"0\");\n            } else {\n                setTxFee(e.target.value)\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        const renderTableData = async () => {\n            const transactions = await gameData.allPendingTransactions.sort((a, b) => b.txFee - a.txFee);\n            const transactionsArray = await Promise.all(transactions.map(async (item) => {\n                let { consumer, provider, typeOfService, amountOfService, price, txFee } = item;\n                const consumerObject = await gameData.players.filter(player => player._id === consumer);\n                const providerObject = await gameData.players.filter(player => player._id === provider);\n                if (!Array.isArray(providerObject) || !providerObject.length) {\n                    return (\n                        {\n                            id: item._id,\n                            consumer: consumerObject[0].playerName,\n                            provider: \"Blockchain\",\n                            typeOfService: typeOfService,\n                            amountOfService: amountOfService,\n                            price: price,\n                            txFee: txFee,\n                            type: \"cancel transaction\"\n                        }\n                    )\n                }\n                return (\n                    {\n                        id: item._id,\n                        consumer: consumerObject[0].playerName,\n                        provider: providerObject[0].playerName,\n                        typeOfService: typeOfService,\n                        amountOfService: amountOfService,\n                        price: price,\n                        txFee: txFee,\n                        type: \"cancel transaction\"\n                    }\n                )\n            }));\n            setTableDataArray(transactionsArray);\n        };\n        renderTableData();\n    }, [gameData]);\n\n    const handleKeypress = async e => {\n        try {\n            if (e.key === 'Enter') {\n                confirm();\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div\n            className={\n                `${isTradeModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'}`\n            }\n        >\n            <div className='modal-confirm-container'>\n                <h3>Create Trade</h3>\n                <div className='modal-confirm-container-data'>\n                    <div className='modal-confirm-container-input'>\n                        <ul>\n                            <li>Player: {tradeModalContent.playerName}</li>\n                            <li>typeOfService: {tradeModalContent.typeOfService}</li>\n                            <li>price: {tradeModalContent.price}</li>\n                        </ul>\n                        <div className={\"trade-modal-input-group\"}>\n                            <label htmlFor={\"txFee\"}>Tx Fee</label>\n                            <div className=\"trade-modal-input-group-container\">\n                                <input type={\"text\"} name={\"txFee\"} id={\"inputHolder\"} placeholder={\"Enter tx fee\"} onChange={e => changeFeeInput(e)} onKeyPress={e => handleKeypress(e)}/>\n                            </div>\n                        </div>\n                        <div className={`${showAlert? 'trade-modal-input-alert show-trade-modal-input-alert' : 'trade-modal-input-alert'}`}>\n                            {alertContent}\n                        </div>\n                    </div>\n                    <div className=\"trade-modal-table-container\">\n                        <table className=\"modal-table-pending-transactions\">\n                            <thead>\n                            <tr>\n                                <th className=\"table-pending-transactions-head\">No.</th>\n                                <th className=\"table-pending-transactions-head\">Pending transactions</th>\n                                <th className=\"table-pending-transactions-head\">Tx Fee</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {\n                                tableDataArray.map((item, index) => (\n                                    <tr\n                                        key={item.id}\n                                        data-tip data-for={item.id}\n                                    >\n                                        <td><strong>{index + 1}</strong></td>\n                                        <td>\n                                            {item.consumer} &#8646; {item.provider}\n                                        </td>\n                                        <td>{item.txFee}</td>\n                                    </tr>\n                                ))\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <button className='close-modal-btn' onClick={() => {\n                    closeTradeModal();\n                    setAlertContent('');\n                    setShowAlert(false);\n                    setTxFee();\n                    document.getElementById(\"inputHolder\").value= \"\";\n                }}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default TradeModal","import React, { useEffect } from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst CancelOrderModal = () => {\n    const { isCancelOrderModalOpen, closeCancelOrderModal, cancelOrderModalContent } = useGlobalContext();\n\n    const confirm = async () => {\n        try {\n            const token = localStorage.getItem(\"auth-token\");\n            const playerId = localStorage.getItem(\"playerId\");\n\n            const confirmRes =  await Axios.delete(`/player/cancelOrder/${playerId}`, {\n                headers: {\n                    Authorization: \"Bearer \" + token\n                },\n                data: {\n                    orderId: cancelOrderModalContent._id\n                }\n            });\n            closeCancelOrderModal();\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const handleKeypress = (e) => {\n        try {\n            if (e.key === 'Enter') {\n                confirm();\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", e => handleKeypress(e));\n        return () => {\n            document.removeEventListener(\"keydown\", e => handleKeypress(e));\n        };\n    }, [cancelOrderModalContent]);\n\n    return (\n        <div\n            className={`${\n                isCancelOrderModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'\n                }`}\n        >\n            <div className='modal-confirm-container'>\n                <h3>Are you sure you want to cancel offer:</h3>\n                <ul>\n                    <li>Player: {cancelOrderModalContent.playerName}</li>\n                    <li>typeOfService: {cancelOrderModalContent.typeOfService}</li>\n                    <li>price: {cancelOrderModalContent.price}</li>\n                </ul>\n                <button className='close-modal-btn' onClick={closeCancelOrderModal}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default CancelOrderModal","import React, { useEffect } from 'react';\nimport {useGlobalContext} from \"../../context/context\";\n\nimport Sidebar from '../layout/Sidebar';\nimport Modal from '../misc/Modal';\nimport Trades from '../misc/Trades';\nimport TradeModal from '../misc/TradeModal';\nimport CancelOrderModal from '../misc/CancelOrderModal';\n\n\n\nconst Trade = () => {\n    const { gameData, isGameOn, setModalContent } = useGlobalContext();\n\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if (token !== (null || \"\") && playerId !== (null || \"\")) {\n                if (!isGameOn) {\n                    setModalContent('Wait for the admin to start the game!');\n                }\n            } else {\n                setModalContent('Please log in!');\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                {\n                    gameData.player ? (\n                        <div>\n                            {\n                                isGameOn ? (\n                                    <div>\n                                        <div className=\"home-grid\">\n                                            <div className=\"item-sidebar\">\n                                                <Sidebar/>\n                                            </div>\n                                            <div className=\"item-content\">\n                                                <Trades/>\n                                            </div>\n                                        </div>\n                                        <TradeModal/>\n                                        <CancelOrderModal/>\n                                    </div>\n                                ) : (\n                                    <>\n                                        <Modal/>\n                                    </>\n                                )\n                            }\n                        </div>\n\n                    ) : (\n                        <>\n                            <Modal/>\n                        </>\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Trade","import React from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { ResponsivePie } from '@nivo/pie'\n\nconst CenteredMetric = ({ dataWithArc, centerX, centerY }) => {\n    const { gameData } = useGlobalContext();\n    let total = gameData.totalStake;\n    return (\n        <text\n            x={centerX}\n            y={centerY}\n            textAnchor=\"middle\"\n            dominantBaseline=\"central\"\n            style={{\n                fontSize: '25px',\n                fontWeight: '500',\n            }}\n        >\n            {total}\n        </text>\n    )\n};\n\nconst PieChart = ({ data }) => (\n    <ResponsivePie\n        data={data}\n        theme={{ \"fontSize\": 16, fontFamily: \"Roboto, sans-serif\", axis: { legend: { text: { fontSize: \"16px\", fontWeight: \"bold\", fontFamily: \"Roboto, sans-serif\" } } } }}\n        margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n        innerRadius={0.3}\n        padAngle={1}\n        cornerRadius={3}\n        colors={{ scheme: 'yellow_orange_red' }}\n        borderWidth={1}\n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\n        enableRadialLabels={false}\n        sliceLabelsSkipAngle={10}\n        sliceLabelsTextColor=\"#333333\"\n        sortByValue={true}\n        layers={['slices', 'sliceLabels', CenteredMetric]}\n    />\n);\n\nexport default PieChart","import React, {useState, useEffect, useRef} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\n\nconst MiningBar = () => {\n    const { gameData } = useGlobalContext();\n    const [timeLeft, setTimeLeft] = useState('');\n    const [width, setWidth] = useState(0);\n\n    function useInterval(callback, delay) {\n        const savedCallback = useRef();\n\n        useEffect(() => {\n            savedCallback.current = callback;\n        }, [callback]);\n\n        useEffect(() => {\n            function tick() {\n                savedCallback.current();\n            }\n            if (delay !== null) {\n                let id = setInterval(tick, delay);\n                return () => clearInterval(id);\n            }\n        }, [delay]);\n    }\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    useInterval(async () => {\n        const createdMillis = await new Date(gameData.miningTime).getTime();\n        let timeLeft = 10000 - (Date.now() - createdMillis);\n        let width = await Math.floor((1 - ((Date.now() - createdMillis) / 10000)) * 100);\n        if (width < 0 || timeLeft < 0) {\n            width = 0;\n            timeLeft = 0;\n        }\n        setTimeLeft(millisToMinutesAndSeconds(timeLeft));\n        setWidth(width);\n    }, 50);\n\n    /*useEffect(() => {\n        let time = 200;\n        const interval = setInterval(async () => {\n            let width = await Math.floor(((time / 200)) * 100);\n            setTimeLeft(millisToMinutesAndSeconds(time*50));\n            setWidth(width);\n            time--;\n            if (time < 0) {\n                clearInterval(interval);\n            }\n        }, 50);\n        return () => clearInterval(interval);\n    }, [gameData.miningTime]);*/\n\n\n\n    return (\n        <>\n            <div className=\"mining-progress-container\">\n                <div className=\"mining-progress-flex\">\n                    <p>Mining</p>\n                    <div className=\"mining-progress\">\n                        <div className=\"mining-progress-filler\" style={{width: `${width}%`}}></div>\n                    </div>\n                </div>\n                <span className=\"mining-progress-text\">Time left: {timeLeft}</span>\n            </div>\n        </>\n    )\n};\n\nexport default MiningBar","import React, {useState, useEffect} from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport MiningBar from './MiningBar';\n\n\nconst TransactionsTable = () => {\n    const { gameData, openConfirmModal, setConfirmModalContent } = useGlobalContext();\n    const [tableDataArray, setTableDataArray] = useState([]);\n    const [timeLeft, setTimeLeft] = useState('');\n    const [width, setWidth] = useState(0);\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    const setCancelTransactionModal = (transaction) => {\n        setConfirmModalContent(transaction);\n        openConfirmModal();\n    };\n\n    useEffect(() => {\n        const renderTableData = async () => {\n            const transactions = await gameData.allPendingTransactions.sort((a, b) => parseInt(b.txFee) - parseInt(a.txFee));\n            const transactionsArray = await Promise.all(transactions.map(async (item) => {\n                let { consumer, provider, typeOfService, amountOfService, price, txFee } = item;\n                const consumerObject = await gameData.players.filter(player => player._id === consumer);\n                const providerObject = await gameData.players.filter(player => player._id === provider);\n                if (!Array.isArray(providerObject) || !providerObject.length) {\n                    return (\n                        {\n                            id: item._id,\n                            consumer: consumerObject[0].playerName,\n                            provider: \"Blockchain\",\n                            typeOfService: typeOfService,\n                            amountOfService: amountOfService,\n                            price: price,\n                            txFee: txFee,\n                            type: \"cancel transaction\"\n                        }\n                    )\n                }\n                return (\n                    {\n                        id: item._id,\n                        consumer: consumerObject[0].playerName,\n                        provider: providerObject[0].playerName,\n                        typeOfService: typeOfService,\n                        amountOfService: amountOfService,\n                        price: price,\n                        txFee: txFee,\n                        type: \"cancel transaction\"\n                    }\n                )\n            }));\n            setTableDataArray(transactionsArray);\n        };\n        renderTableData();\n        const calculateTimeLeft = async () => {\n            const createdMillis = await new Date(gameData.miningTime).getTime();\n            let timeLeft = 10000 - (Date.now() - createdMillis);\n            let width = await Math.floor((1 - ((Date.now() - createdMillis) / 10000)) * 100);\n            if (width < 0 || timeLeft < 0) {\n                width = 0;\n                timeLeft = 0;\n            }\n            setTimeLeft(millisToMinutesAndSeconds(timeLeft));\n            setWidth(width);\n        };\n        calculateTimeLeft();\n    }, [gameData]);\n\n\n    return (\n        <>\n            <div className=\"pending-transactions-container\">\n                <MiningBar/>\n                <div className=\"table-pending-transactions-container\">\n                    <table className=\"table-pending-transactions\">\n                        <thead>\n                        <tr>\n                            <th className=\"table-pending-transactions-head\">No.</th>\n                            <th className=\"table-pending-transactions-head\">Pending transactions</th>\n                            <th className=\"table-pending-transactions-head\">Tx Fee</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            tableDataArray.map((item, index) => (\n                                <tr\n                                    key={item.id}\n                                    data-tip data-for={item.id}\n                                    style={{background: `${(item.consumer === gameData.player.playerName) || (item.provider === gameData.player.playerName) ? '#fffd6c' : ''}`}}\n                                >\n                                    <td><strong>{index + 1}</strong></td>\n                                    <td>\n                                        {item.consumer} &#8646; {item.provider}\n                                        {item.consumer === gameData.player.playerName ?\n                                            <button\n                                                className='cancel-transaction-btn'\n                                                onClick={() => { ((item.consumer === gameData.player.playerName) || (item.provider === gameData.player.playerName)) && setCancelTransactionModal(item)}}\n                                            >\n                                                <FaTimes></FaTimes>\n                                            </button>\n                                            :''}\n                                    </td>\n                                    <td>{item.txFee}</td>\n                                    <td className=\"table-pending-transactions-tooltip\">\n                                        <ReactTooltip id={item.id} place=\"bottom\" type=\"dark\" effect=\"solid\">\n                                            <ul>\n                                                <li>Consumer: {item.consumer}</li>\n                                                <li>Provider: {item.provider}</li>\n                                                <li>typeOfService: {item.typeOfService}</li>\n                                                <li>price: {item.price}</li>\n                                            </ul>\n                                        </ReactTooltip>\n                                    </td>\n                                </tr>\n                            ))\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default TransactionsTable","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\n\nconst AllTransactionsTable = () => {\n    const { gameData,  } = useGlobalContext();\n    const [tableDataArray, setTableDataArray] = useState([]);\n    const [sortBy, setSortBy] = useState('time');\n    const [orderOfSort, setOrderOfSort] = useState('ascending');\n    const [checkBoxes, setCheckBoxes] = useState([{type: \"Mechanical service\", isChecked: false}, {type: \"Electrical service\", isChecked: false}, {type: \"IT service\", isChecked: false}, {type: \"Stake\", isChecked: false}, {type: \"Unstake\", isChecked: false}]);\n\n    const displayTime = async (time) => {\n        const createdMillis = await new Date(time);\n        return createdMillis.toLocaleTimeString('it-IT');\n    };\n\n    const sortDataArray = async (dataArray) => {\n        if (sortBy === 'time') {\n            return await dataArray.sort((a, b) => {\n                let arrayA = a.createdAt.split(\":\");\n                let timeA = (parseInt(arrayA[0], 10) * 60 * 60) + (parseInt(arrayA[1], 10) * 60) + parseInt(arrayA[2], 10);\n                let arrayB = b.createdAt.split(\":\");\n                let timeB = (parseInt(arrayB[0], 10) * 60 * 60) + (parseInt(arrayB[1], 10) * 60) + parseInt(arrayB[2], 10);\n                if (orderOfSort === \"descending\") {\n                    return timeB - timeA;\n                } if (orderOfSort === \"ascending\") {\n                    return timeA - timeB;\n                }\n            });\n        } if (sortBy === 'consumer') {\n            return await dataArray.sort((a, b) => {\n                let textA = a.consumer.toUpperCase();\n                let textB = b.consumer.toUpperCase();\n                if (orderOfSort === \"descending\") {\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n                } if (orderOfSort === \"ascending\") {\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n                }\n            });\n        } if (sortBy === 'provider') {\n            return await dataArray.sort((a, b) => {\n                let textA = a.provider.toUpperCase();\n                let textB = b.provider.toUpperCase();\n                if (orderOfSort === \"descending\") {\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n                } if (orderOfSort === \"ascending\") {\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n                }\n            });\n        } if (sortBy === 'typeOfService') {\n            return await dataArray.sort((a, b) => {\n                let textA = a.typeOfService.toUpperCase();\n                let textB = b.typeOfService.toUpperCase();\n                if (orderOfSort === \"descending\") {\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n                } if (orderOfSort === \"ascending\") {\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n                }\n            });\n        } if (sortBy === 'price') {\n            if (orderOfSort === \"descending\") {\n                return await dataArray.sort((a, b) => parseInt(b.price) - parseInt(a.price));\n            } if (orderOfSort === \"ascending\") {\n                return await dataArray.sort((a, b) => parseInt(a.price) - parseInt(b.price));\n            }\n        } if (sortBy === 'txFee') {\n            if (orderOfSort === \"descending\") {\n                return await dataArray.sort((a, b) => parseInt(b.txFee) - parseInt(a.txFee));\n            } if (orderOfSort === \"ascending\") {\n                return await dataArray.sort((a, b) => parseInt(a.txFee) - parseInt(b.txFee));\n            }\n        }\n    };\n\n    const selectOne = async (e) => {\n        let itemName = e.target.name;\n        let checked = e.target.checked;\n        const newArray = await checkBoxes.map(item =>\n            item.type === itemName ? { ...item, isChecked: checked } : item\n        );\n        setCheckBoxes(newArray);\n    };\n\n    const filterDataArray = async (dataArray) => {\n        const checkedBoxes = await checkBoxes.filter(item => item.isChecked);\n        const selectedTypes = await checkedBoxes.map(item => item.type);\n        if (!Array.isArray(selectedTypes) || !selectedTypes.length) {\n            return dataArray;\n        }\n        return dataArray.filter(data => selectedTypes.includes(data.typeOfService));\n    };\n\n    useEffect(() => {\n        const renderTableData = async () => {\n            const transactionsArray = await Promise.all(gameData.allTransactions.map(async (item) => {\n                let { consumer, provider, typeOfService, amountOfService, price, txFee, createdAt } = item;\n                const consumerObject = await gameData.players.filter(player => player._id === consumer);\n                const providerObject = await gameData.players.filter(player => player._id === provider);\n                const timeString = await displayTime(createdAt);\n                if (!Array.isArray(providerObject) || !providerObject.length) {\n                    return (\n                        {\n                            id: item._id,\n                            consumer: consumerObject[0].playerName,\n                            provider: \"Blockchain\",\n                            typeOfService: typeOfService,\n                            amountOfService: amountOfService,\n                            price: price,\n                            txFee: txFee,\n                            type: \"cancel transaction\",\n                            createdAt: timeString\n                        }\n                    )\n                }\n                return (\n                    {\n                        id: item._id,\n                        consumer: consumerObject[0].playerName,\n                        provider: providerObject[0].playerName,\n                        typeOfService: typeOfService,\n                        amountOfService: amountOfService,\n                        price: price,\n                        txFee: txFee,\n                        type: \"cancel transaction\",\n                        createdAt: timeString\n                    }\n                )\n            }));\n            const filteredTransactionsArray = await filterDataArray(transactionsArray);\n            const dataArray = await sortDataArray(filteredTransactionsArray);\n            setTableDataArray(dataArray);\n        };\n        renderTableData();\n    }, [gameData, checkBoxes, orderOfSort]);\n\n\n    return (\n        <>\n            <div className=\"table-all-transactions-container\">\n                <div className=\"filter-all-transactions\">\n                    {\n                        checkBoxes.map((item) => (\n                            <label className=\"checkbox-container\" key={item.type}>{item.type}\n                                <input type=\"checkbox\" name={item.type} checked={item.isChecked} onChange={selectOne}/>\n                                <span className=\"checkmark\"></span>\n                            </label>\n                        ))\n                    }\n                </div>\n                <div className=\"table-all-transactions-overflow\">\n                    <table className=\"table-all-transactions\">\n                        <thead>\n                        <tr>\n                            <th onClick={() => {\n                                setSortBy('time');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Time {sortBy === 'time' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('consumer');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Consumer {sortBy === 'consumer' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('provider');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Provider {sortBy === 'provider' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('typeOfService');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Type of service {sortBy === 'typeOfService' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('price');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Price/Amount {sortBy === 'price' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('txFee');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Tx Fee {sortBy === 'txFee' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            tableDataArray.map((item) =>\n                                (\n                                    <tr key={item.id}>\n                                        <td>{item.createdAt}</td>\n                                        <td>{item.consumer}</td>\n                                        <td>{item.provider}</td>\n                                        <td>{item.typeOfService}</td>\n                                        <td>{item.price}</td>\n                                        <td>{item.txFee}</td>\n                                    </tr>\n                                )\n                            )\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default AllTransactionsTable","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport PieChart from '../misc/PieChart';\nimport TransactionsTable from '../misc/TransactionsTable';\nimport AllTransactionsTable from '../misc/AllTransactionsTable';\nimport Axios from \"axios/index\";\n\n\n\nconst BlockchainData = () => {\n    const { gameData } = useGlobalContext();\n    const [chartDataArray, setChartDataArray] = useState([]);\n    const [relativeStake, setRelativeStake] = useState(0);\n    const [newStake, setNewStake] = useState(\"0\");\n    const [txFee, setTxFee] = useState(\"0\");\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirmStake = async () => {\n        try {\n            if ((txFee === undefined || txFee === \"\") || (newStake === undefined || newStake === \"\")) {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if ((isNaN(txFee) || txFee < 0) || (isNaN(newStake) || newStake < 0)) {\n                    setAlertContent('Amount and tx fee cannot be a negative number');\n                    setShowAlert(true);\n                } else {\n                    if (countDecimals(txFee) > 0 || countDecimals(newStake) > 0)  {\n                        setAlertContent('Input value must be an integer');\n                        setShowAlert(true);\n                    } else {\n                        if (parseInt(newStake) + parseInt(txFee) > gameData.player.balance) {\n                            setAlertContent('Amount + TxFee is bigger than balance');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                stake: newStake,\n                                txFee: txFee\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const confirmRes =  await Axios.post(`/player/stake/${playerId}`, data, options);\n                            setNewStake(\"0\");\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee(\"0\");\n                            document.getElementById(\"inputHolder\").value= \"\";\n                            document.getElementById(\"amountHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const confirmUnstake = async () => {\n        try {\n            if ((txFee === undefined || txFee === \"\") || (newStake === undefined || newStake === \"\")) {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if ((isNaN(txFee) || txFee < 0) || (isNaN(newStake) || newStake <= 0)) {\n                    setAlertContent('Amount and tx fee cannot be a negative number');\n                    setShowAlert(true);\n                } else {\n                    if (countDecimals(txFee) > 0 || countDecimals(newStake) > 0) {\n                        setAlertContent('Input value must be an integer');\n                        setShowAlert(true);\n                    } else {\n                        if ((parseInt(newStake) + 1) > gameData.player.stake) {\n                            setAlertContent('Amount is bigger than your stake (minimum value is 1)');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                unstake: newStake,\n                                txFee: txFee\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const confirmRes =  await Axios.post(`/player/unstake/${playerId}`, data, options);\n                            setNewStake(\"0\");\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee(\"0\");\n                            document.getElementById(\"inputHolder\").value= \"\";\n                            document.getElementById(\"amountHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const changeStakeInput = async (e) => {\n        try {\n            if (e.target.value === \"\") {\n                setNewStake(\"0\");\n            } else {\n                setNewStake(e.target.value)\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const changeFeeInput = async (e) => {\n        try {\n            if (e.target.value === \"\") {\n                setTxFee(\"0\");\n            } else {\n                setTxFee(e.target.value)\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        const createDataArray = async () => {\n            const dataArray = await gameData.players.map((item) => {\n                return({\n                    id: item.playerName,\n                    value: item.stake\n                });\n            });\n            setChartDataArray(dataArray);\n        };\n        createDataArray();\n        let newRelativeStake = ((gameData.player.stake / gameData.totalStake) * 100).toFixed(1);\n        setRelativeStake(newRelativeStake);\n    }, [gameData]);\n\n\n\n    return (\n        <>\n            <div className=\"blockchain-container\">\n                <div className=\"blockchain-info-container\">\n                    <TransactionsTable/>\n                    <div className=\"piechart-container\">\n                        <div className=\"piechart-container-text\">\n                            <h3>Blockchain - stake</h3>\n                            <h4>Your stake: {gameData.player.stake} ({relativeStake}%)</h4>\n                        </div>\n                        <div className=\"piechart-container-chart-stake\">\n                            <div className=\"piechart-container-chart\">\n                                <PieChart data={chartDataArray}/>\n                            </div>\n                            <div className=\"stake-input-container\">\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"Amount\"}>Amount</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#dbdbdb\"}} type={\"text\"} name={\"amount\"} id={\"amountHolder\"} placeholder={\"Enter amount\"} onChange={e => changeStakeInput(e)}/>\n                                    </div>\n                                </div>\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"txFee\"}>Tx Fee</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#dbdbdb\"}} type={\"text\"} name={\"txFee\"} id={\"inputHolder\"} placeholder={\"Enter tx fee\"} onChange={e => changeFeeInput(e)}/>\n                                    </div>\n                                </div>\n                                <div className={`${showAlert? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`}>\n                                    {alertContent}\n                                </div>\n                                <button className='confirm-stake-btn' onClick={() => confirmStake()}>Stake</button>\n                                <button className='confirm-unstake-btn' onClick={() => confirmUnstake()}>Unstake</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"all-transactions-container\">\n                    <h3>Transactions History</h3>\n                    <AllTransactionsTable/>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default BlockchainData","import React, { useEffect } from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst ConfirmModal = () => {\n    const { isConfirmModalOpen, closeConfirmModal, confirmModalContent } = useGlobalContext();\n\n    const confirm = async () => {\n        try {\n            const token = localStorage.getItem(\"auth-token\");\n            const playerId = localStorage.getItem(\"playerId\");\n            debugger;\n            if (confirmModalContent.type === \"cancel transaction\") {\n                const confirmRes =  await Axios.delete(`/player/cancelTransaction/${playerId}`, {\n                    headers: {\n                        Authorization: \"Bearer \" + token\n                    },\n                    data: {\n                        transactionId: confirmModalContent.id\n                    }\n                });\n            }\n            closeConfirmModal();\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const handleKeypress = (e) => {\n        try {\n            if (e.key === 'Enter') {\n                confirm();\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        document.addEventListener(\"keydown\", e => handleKeypress(e));\n        return () => {\n            document.removeEventListener(\"keydown\", e => handleKeypress(e));\n        };\n    }, [confirmModalContent]);\n\n    return (\n        <div\n            className={`${\n                isConfirmModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'\n                }`}\n        >\n            <div className='modal-confirm-container'>\n                <h3>Are you sure you want to {confirmModalContent.type}:</h3>\n                <ul>\n                    <li>Consumer: {confirmModalContent.consumer}</li>\n                    <li>Provider: {confirmModalContent.provider}</li>\n                    <li>typeOfService: {confirmModalContent.typeOfService}</li>\n                    <li>price: {confirmModalContent.price}</li>\n                    <li>txFee: {confirmModalContent.txFee}</li>\n                </ul>\n                <button className='close-modal-btn' onClick={closeConfirmModal}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default ConfirmModal","import React, { useEffect } from 'react';\nimport {useGlobalContext} from \"../../context/context\";\n\nimport Sidebar from '../layout/Sidebar';\nimport Modal from '../misc/Modal';\nimport BlockchainData from '../misc/BlockchainData';\nimport ConfirmModal from '../misc/ConfirmModal';\n\n\nconst Blockchain = () => {\n    const { gameData, isGameOn, setModalContent } = useGlobalContext();\n\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if (token !== (null || \"\") && playerId !== (null || \"\")) {\n                if (!isGameOn) {\n                    setModalContent('Wait for the admin to start the game!');\n                }\n            } else {\n                setModalContent('Please log in!');\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                {\n                    gameData.player ? (\n                        <div>\n                            {\n                                isGameOn ? (\n                                    <div>\n                                        <div className=\"home-grid\">\n                                            <div className=\"item-sidebar\">\n                                                <Sidebar/>\n                                            </div>\n                                            <div className=\"item-content\">\n                                                <BlockchainData/>\n                                            </div>\n                                        </div>\n                                        <ConfirmModal/>\n                                    </div>\n                                ) : (\n                                    <>\n                                        <Modal/>\n                                    </>\n                                )\n                            }\n                        </div>\n\n                    ) : (\n                        <>\n                            <Modal/>\n                        </>\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Blockchain","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\n\nconst RankingTable = () => {\n    const { gameData,  } = useGlobalContext();\n    const [tableDataArray, setTableDataArray] = useState([]);\n\n    useEffect(() => {\n        const renderTableData = async () => {\n            const players = await gameData.players.sort((a, b) => parseInt(b.upgradeNumber) === parseInt(a.upgradeNumber) ? (parseInt(b.balance) + parseInt(b.stake)) - (parseInt(a.balance) + parseInt(a.stake)) : parseInt(b.upgradeNumber) - parseInt(a.upgradeNumber));\n            setTableDataArray(players);\n        };\n        renderTableData();\n    }, [gameData]);\n\n\n    return (\n        <>\n            <div className=\"ranking-container\">\n                <div className=\"table-all-transactions-container\">\n                    <h2>Players Ranking</h2>\n                    <div className=\"table-ranking\">\n                        <table className=\"table-all-rankings\">\n                            <thead>\n                            <tr>\n                                <th>Rank</th>\n                                <th>Player</th>\n                                <th>Type of service</th>\n                                <th>Number of upgrades</th>\n                                <th>Balance</th>\n                                <th>Stake</th>\n                                <th>Revenue from trade</th>\n                                <th>Revenue from stake</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {\n                                tableDataArray.map((item, index) => (\n                                    <tr\n                                        key={item._id}\n                                        style={{background: `${item.playerName === gameData.player.playerName ? '#fffd6c' : ''}`}}\n                                    >\n                                        <td><strong>{index + 1}</strong></td>\n                                        <td>{item.playerName}</td>\n                                        <td>{item.typeOfService}</td>\n                                        <td>{item.upgradeNumber}</td>\n                                        <td>{item.balance}</td>\n                                        <td>{item.stake}</td>\n                                        <td>{item.fromServiceBalance}</td>\n                                        <td>{item.fromStakeBalance}</td>\n                                    </tr>\n                                ))\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default RankingTable","import React, { useEffect } from 'react';\nimport {useGlobalContext} from \"../../context/context\";\n\nimport Sidebar from '../layout/Sidebar';\nimport Modal from '../misc/Modal';\nimport RankingTable from '../misc/RankingTable'\n\n\nconst Ranking = () => {\n    const { gameData, isGameOn, setModalContent} = useGlobalContext();\n\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if ((token === null || token === \"\") && (playerId === null || playerId === \"\")) {\n                setModalContent('Please log in!');\n            } else {\n                if (!isGameOn) {\n                    setModalContent('Wait for the admin to start the game!');\n                }\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                {\n                    gameData.player ? (\n                        <div>\n                            {\n                                isGameOn ? (\n                                    <div>\n                                        <div className=\"home-grid\">\n                                            <div className=\"item-sidebar\">\n                                                <Sidebar/>\n                                            </div>\n                                            <div className=\"item-content\">\n                                                <RankingTable/>\n                                            </div>\n                                        </div>\n                                    </div>\n                                ) : (\n                                    <>\n                                        <Modal/>\n                                    </>\n                                )\n                            }\n                        </div>\n\n                    ) : (\n                        <>\n                            <Modal/>\n                        </>\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Ranking","import React from 'react';\n\n\nconst Error = () => {\n\n    return (\n        <div>\n            <h1>Ups something went wrong!</h1>\n        </div>\n    )\n};\n\nexport default Error","import React, { useState, useEffect, useCallback } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {useGlobalContext} from \"./context/context\";\nimport { io } from 'socket.io-client';\n\nimport Navbar from './components/layout/Navbar';\nimport Home from './components/pages/Home';\nimport Login from \"./components/auth/Login\";\nimport Trade from './components/pages/Trade';\nimport Blockchain from './components/pages/Blockchain';\nimport Ranking from './components/pages/Ranking';\nimport Error from './components/pages/Error';\nimport Axios from \"axios/index\";\n\nAxios.defaults.baseURL = 'https://sharedmanufacturing.ldse.si:8000';\n//Axios.defaults.baseURL = 'http://localhost:8000';\n\nfunction App() {\n    const { setIsGameOn, isGameOn, setGameData, gameData, openAlert } = useGlobalContext();\n    const [socket, setSocket] = useState();\n\n    const socketConnected = useCallback(() => {\n        try {\n            const playerId = localStorage.getItem(\"playerId\");\n            const sessionID = socket.id;\n            socket.emit(\"query\", sessionID, playerId);\n        } catch (err) {\n            if (err.response !== undefined && err.response.data.message === \"Auth failed\") {\n                localStorage.setItem(\"auth-token\", \"\");\n                localStorage.setItem(\"playerId\", \"\");\n                window.location.reload(false);\n            }\n        }\n    }, [socket]);\n\n    const initialData = useCallback(async (data) => {\n        try {\n            const token = localStorage.getItem(\"auth-token\");\n            setGameData({\n                token,\n                player: data.player,\n                orders: data.orders,\n                allPendingTransactions: data.allPendingTransactions,\n                services: data.services,\n                totalStake: data.totalStake,\n                players: data.players,\n                allTransactions: data.allTransactions,\n                miningTime: data.miningTime\n            });\n            setIsGameOn(data.isGameOn);\n        } catch (err) {\n            console.log(err);\n        }\n    }, [setGameData, setIsGameOn]);\n\n    const startGame = useCallback(async (data) => {\n        try {\n            setIsGameOn(true);\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.miningTime = data;\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData, setGameData, setIsGameOn]);\n\n    const endGame = useCallback(async () => {\n        try {\n            setIsGameOn(false);\n        } catch (err) {\n            console.log(err);\n        }\n    }, [setIsGameOn]);\n\n    const createOrder = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.orders.push(data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, []);\n\n    const deleteOrder = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.orders = newData.orders.filter( obj => obj._id !== data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData, setGameData]);\n\n    const updateBalance = useCallback(async (value, id, type, amount) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                if (newData.player._id === id) {\n                    newData.player.balance = parseInt(value);\n                    const elementsIndex = newData.players.findIndex(el => el._id === id );\n                    let newArray = [...newData.players];\n                    if (type === \"stake\") {\n                        newData.player.fromStakeBalance = parseInt(amount);\n                        newArray[elementsIndex] = {...newArray[elementsIndex], balance: parseInt(value), fromStakeBalance: parseInt(amount)};\n                    } else if (type === \"trade\") {\n                        newData.player.fromServiceBalance = parseInt(amount);\n                        newArray[elementsIndex] = {...newArray[elementsIndex], balance: parseInt(value), fromServiceBalance: parseInt(amount)};\n                    } else {\n                        newArray[elementsIndex] = {...newArray[elementsIndex], balance: parseInt(value)};\n                    }\n                    newData.players = newArray;\n                } else {\n                    const elementsIndex = newData.players.findIndex(el => el._id === id );\n                    let newArray = [...newData.players];\n                    if (type === \"stake\") {\n                        newArray[elementsIndex] = {...newArray[elementsIndex], balance: parseInt(value), fromStakeBalance: parseInt(amount)};\n                    } else if (type === \"trade\") {\n                        newArray[elementsIndex] = {...newArray[elementsIndex], balance: parseInt(value), fromServiceBalance: parseInt(amount)};\n                    } else {\n                        newArray[elementsIndex] = {...newArray[elementsIndex], balance: parseInt(value)};\n                    }\n                    newData.players = newArray;\n                }\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const deleteTransaction = useCallback(async (data, intended) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                const transaction = newData.allPendingTransactions.filter( obj => obj._id === data);\n                if ((transaction[0].consumer === newData.player._id) && !intended)  {\n                    openAlert();\n                }\n                newData.allPendingTransactions = newData.allPendingTransactions.filter( obj => obj._id !== data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData, setGameData]);\n\n    const createTransaction = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                const found = prevState.allPendingTransactions.some(el => el._id === data._id);\n                if (!found) {\n                    let newData = {...prevState};\n                    newData.allPendingTransactions.push(data);\n                    return newData;\n                } else {\n                    return {...prevState};\n                }\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const createService = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.services.push(data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, []);\n\n    const deleteService = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.services = newData.services.filter( obj => obj._id !== data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData, setGameData]);\n\n    const updateAvailableService = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.player.amountOfAvailableService = parseInt(data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const updateOtherService1 = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.player.amountOfOtherService1 = parseInt(data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const updateOtherService2 = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.player.amountOfOtherService2 = parseInt(data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const updateStake = useCallback(async (id, value) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                if (newData.player._id === id) {\n                    newData.player.stake = parseInt(value);\n                    const elementsIndex = newData.players.findIndex(el => el._id === id );\n                    let newArray = [...newData.players];\n                    newArray[elementsIndex] = {...newArray[elementsIndex], stake: parseInt(value)};\n                    newData.players = newArray;\n                    newData.totalStake = newArray.reduce((total, current) => total + current.stake, 0);\n                } else {\n                    const elementsIndex = newData.players.findIndex(el => el._id === id );\n                    let newArray = [...newData.players];\n                    newArray[elementsIndex] = {...newArray[elementsIndex], stake: parseInt(value)};\n                    newData.players = newArray;\n                }\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const updateTime = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.miningTime = parseInt(data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const initialTime = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.player.nextTimeForService = data;\n                newData.player.initialTimeForService = newData.player.timeForService;\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const updateServiceTime = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.player.serviceTimestamp = data;\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const updateProduction = useCallback(async (newTimeForService, newNextTimeForService, upgradeNumber, service1, service2) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.player.timeForService = newTimeForService;\n                newData.player.nextTimeForService = newNextTimeForService;\n                newData.player.upgradeNumber = upgradeNumber;\n                newData.player.amountOfOtherService1 = service1;\n                newData.player.amountOfOtherService2 = service2;\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const addAllTransaction = useCallback(async (data) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                newData.allTransactions.push(data);\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n    const updateUpgrade = useCallback(async (id, value) => {\n        try {\n            setGameData(prevState => {\n                let newData = {...prevState};\n                if (newData.player._id === id) {\n                    newData.player.upgradeNumber = value;\n                    const elementsIndex = newData.players.findIndex(el => el._id === id );\n                    let newArray = [...newData.players];\n                    newArray[elementsIndex] = {...newArray[elementsIndex], upgradeNumber: value};\n                    newData.players = newArray;\n                } else {\n                    const elementsIndex = newData.players.findIndex(el => el._id === id );\n                    let newArray = [...newData.players];\n                    newArray[elementsIndex] = {...newArray[elementsIndex], upgradeNumber: value};\n                    newData.players = newArray;\n                }\n                return newData;\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }, [gameData]);\n\n\n    useEffect(() => {\n        const connectSocket = async () => {\n            const token = await localStorage.getItem(\"auth-token\");\n            const playerId = await localStorage.getItem(\"playerId\");\n            if (!((token === null || token === \"\") && (playerId === null || playerId === \"\"))) {\n                const newSocket = io('https://sharedmanufacturing.ldse.si:8000', {\n                    query: {\n                        playerId: playerId\n                    },\n                    auth: {\n                        token: token\n                    }\n                });\n                /*const newSocket = io('localhost:8000', {\n                    query: {\n                        playerId: playerId\n                    },\n                    auth: {\n                        token: token\n                    }\n                });*/\n                setSocket(newSocket);\n                return () => newSocket.close();\n            }\n        };\n        connectSocket();\n    }, [isGameOn]);\n\n\n    useEffect(() => {\n        if (socket == null) return;\n        socket.on('connect', socketConnected);\n        socket.on('data', initialData);\n        socket.on('start', startGame);\n        socket.on('end', endGame);\n        socket.on(\"create_order\", createOrder);\n        socket.on(\"delete_order\", deleteOrder);\n        socket.on(\"update_balance\", updateBalance);\n        socket.on(\"delete_transaction\", deleteTransaction);\n        socket.on(\"create_transaction\", createTransaction);\n        socket.on(\"create_service\", createService);\n        socket.on(\"delete_service\", deleteService);\n        socket.on(\"update_available_service\", updateAvailableService);\n        socket.on(\"update_other_service1\", updateOtherService1);\n        socket.on(\"update_other_service2\", updateOtherService2);\n        socket.on(\"update_stake\", updateStake);\n        socket.on(\"update_time\", updateTime);\n        socket.on(\"initial_time\", initialTime);\n        socket.on(\"update_service_time\", updateServiceTime);\n        socket.on(\"update_production\", updateProduction);\n        socket.on(\"add_allTransaction\", addAllTransaction);\n        socket.on(\"update_upgrade\", updateUpgrade);\n        return () => {\n            socket.off('connect');\n            socket.off('data');\n            socket.off('start');\n            socket.off('end');\n            socket.off('create_order');\n            socket.off('delete_order');\n            socket.off('update_balance');\n            socket.off('delete_transaction');\n            socket.off('create_transaction');\n            socket.off('create_service');\n            socket.off('delete_service');\n            socket.off('update_available_service');\n            socket.off('update_other_service1');\n            socket.off('update_other_service2');\n            socket.off('update_stake');\n            socket.off('update_time');\n            socket.off('initial_time');\n            socket.off('update_service_time');\n            socket.off('update_production');\n            socket.off('add_allTransaction');\n            socket.off('update_upgrade');\n        }\n    }, [socket,\n        gameData,\n        socketConnected,\n        initialData,\n        startGame,\n        endGame,\n        createOrder,\n        deleteOrder,\n        updateBalance,\n        deleteTransaction,\n        createTransaction,\n        createService,\n        deleteService,\n        updateAvailableService,\n        updateOtherService1,\n        updateOtherService2,\n        updateStake,\n        updateTime,\n        initialTime,\n        updateServiceTime,\n        updateProduction,\n        addAllTransaction,\n        updateUpgrade]\n    );\n\n    return (\n        <>\n            <Router>\n                <Navbar/>\n                <Switch>\n                    <Route exact path={\"/\"} component={Home} />\n                    <Route path={\"/login\"} component={Login}/>\n                    <Route path={\"/trade\"} component={Trade}/>\n                    <Route path={\"/blockchain\"} component={Blockchain}/>\n                    <Route path={\"/ranking\"} component={Ranking}/>\n                    <Route path={\"*\"} component={Error}/>\n                </Switch>\n            </Router>\n        </>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {AppProvider} from \"./context/context\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App/>\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}